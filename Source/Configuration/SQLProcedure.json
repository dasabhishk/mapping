{
    "Procedures": {
        "sp_MarkPatientStudyDuplicates.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            " ",
            "",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_MarkPatientStudyDuplicates','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_MarkPatientStudyDuplicates;",
            "GO",
            "",
            "CREATE PROCEDURE cmmt.sp_MarkPatientStudyDuplicates",
            "  @ReturnStatus  INT OUTPUT",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            "  BEGIN TRY",
            "  ;WITH RankedStudyInstancesForPatientStudy AS (",
            "    SELECT",
            "      Id, ",
            "      StudyInstanceUID,",
            "      COUNT(*) OVER (PARTITION BY StudyInstanceUID) AS CountOfUID",
            "    FROM cmmt.cmmt_PatientStudyMetaData",
            "    WHERE StudyInstanceUID IS NOT NULL AND LTRIM(RTRIM(StudyInstanceUID)) <> ''",
            "    AND (Status IS NULL OR Status = '' OR Status = 'P' OR Status = 'V')",
            "  )",
            "  UPDATE cmmt.cmmt_PatientStudyMetaData",
            "  SET Status = 'D'",
            "  FROM cmmt.cmmt_PatientStudyMetaData AS p",
            "  INNER JOIN RankedStudyInstancesForPatientStudy AS r",
            "  ON p.Id = r.Id",
            "  WHERE r.CountOfUID > 1",
            "  AND (Status IS NULL OR Status = '');",
            "  SET @ReturnStatus = 0;",
            "  END TRY",
            "  BEGIN CATCH",
            "  -- capture any error number",
            "  SET @ReturnStatus = ERROR_NUMBER();",
            "  END CATCH",
            "END;",
            "GO"
        ],
        "sp_ImportValidationForPatient_UpdateDemographicInvalid.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_ImportValidationForPatient_UpdateDemographicInvalid','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ImportValidationForPatient_UpdateDemographicInvalid;",
            "GO",
            "",
            "CREATE PROCEDURE cmmt.sp_ImportValidationForPatient_UpdateDemographicInvalid",
            "  @ReturnStatus  INT OUTPUT",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            "--MRN,InstitutionName and Demographic check",
            "  BEGIN TRY",
            "\tUPDATE p",
            "  SET p.Status = 'I'",
            "  FROM cmmt.cmmt_PatientStudyMetaData AS p",
            "  WHERE",
            "    -- only update rows where Status is NULL or empty (not already marked)",
            "    (p.Status IS NULL OR p.Status = '')",
            "    AND EXISTS (",
            "        SELECT 1",
            "        FROM cmmt.cmmt_PatientStudyMetaData AS d",
            "        WHERE",
            "            d.Id <> p.Id",
            "            AND d.MRN = p.MRN",
            "            AND (d.Status IS NULL OR d.Status = '')",
            "            AND (",
            "                NOT (",
            "                    (d.FirstName IS NULL AND p.FirstName IS NULL)",
            "                    OR (LTRIM(RTRIM(d.FirstName)) = '' AND LTRIM(RTRIM(p.FirstName)) = '')",
            "                    OR (LTRIM(RTRIM(d.FirstName)) = LTRIM(RTRIM(p.FirstName)))",
            "                )",
            "                OR",
            "                NOT (",
            "                    (d.MiddleName IS NULL AND p.MiddleName IS NULL)",
            "                    OR (LTRIM(RTRIM(d.MiddleName)) = '' AND LTRIM(RTRIM(p.MiddleName)) = '')",
            "                    OR (LTRIM(RTRIM(d.MiddleName)) = LTRIM(RTRIM(p.MiddleName)))",
            "                )",
            "                OR",
            "                LTRIM(RTRIM(d.LastName)) <> LTRIM(RTRIM(p.LastName))",
            "                OR",
            "                (",
            "                    d.Birthdate LIKE '[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]' AND",
            "                    p.Birthdate LIKE '[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]' AND",
            "                    TRY_CONVERT(date, d.Birthdate, 23) IS NOT NULL AND",
            "                    TRY_CONVERT(date, p.Birthdate, 23) IS NOT NULL AND",
            "                    TRY_CONVERT(date, d.Birthdate, 23) <> TRY_CONVERT(date, p.Birthdate, 23)",
            "                )",
            "                OR",
            "                d.Gender <> p.Gender",
            "            )",
            "    );",
            "  SET @ReturnStatus = 0;",
            "  END TRY",
            "  BEGIN CATCH",
            "  -- capture any error number",
            "  SET @ReturnStatus = ERROR_NUMBER();",
            "  END CATCH",
            "END;",
            "GO"
        ],
        "sp_ImportValidationForPatient_UpdateInvalidNullCheck.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_ImportValidationForPatient_UpdateInvalidNullCheck','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ImportValidationForPatient_UpdateInvalidNullCheck;",
            "GO",
            "CREATE PROCEDURE cmmt.sp_ImportValidationForPatient_UpdateInvalidNullCheck",
            "  @ReturnStatus  INT OUTPUT",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            "  BEGIN TRY",
            "  UPDATE cmmt.cmmt_PatientStudyMetaData",
            "  SET Status = 'I'",
            "  FROM cmmt.cmmt_PatientStudyMetaData",
            "  WHERE (Status IS NULL OR Status = '')",
            "    AND (",
            "       -- required fields missing",
            "         MRN             IS NULL OR LTRIM(RTRIM(MRN))             = ''",
            "      OR LastName        IS NULL OR LTRIM(RTRIM(LastName))        = ''",
            "      OR InstitutionName IS NULL OR LTRIM(RTRIM(InstitutionName)) = ''",
            "      OR ModalityType IS NULL OR LTRIM(RTRIM(ModalityType))       = ''",
            "      OR LEN(LTRIM(RTRIM(AccessionNumber))) > 16",
            "       -- birthdate must parse as yyyy-MM-dd",
            "      OR Birthdate NOT LIKE '[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]'",
            "      OR TRY_CONVERT(date, Birthdate, 23) IS NULL",
            "      OR StudyInstanceUID   IS NULL OR LTRIM(RTRIM(StudyInstanceUID))   = '');",
            "  SET @ReturnStatus = 0;",
            "  END TRY",
            "  BEGIN CATCH",
            "  -- capture any error number",
            "  SET @ReturnStatus = ERROR_NUMBER();",
            "  END CATCH",
            "END;",
            "GO"
        ],
        "sp_ImportValidationForPatient_UpdateValid.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_ImportValidationForPatient_UpdateValid','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ImportValidationForPatient_UpdateValid;",
            "GO",
            "CREATE PROCEDURE cmmt.sp_ImportValidationForPatient_UpdateValid",
            "  @ReturnStatus  INT OUTPUT",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            "  BEGIN TRY",
            "  UPDATE cmmt.cmmt_PatientStudyMetaData",
            "  SET Status = 'V'",
            "  WHERE Status IS NULL OR Status = '';",
            "  SET @ReturnStatus = 0;",
            "  END TRY",
            "  BEGIN CATCH",
            "  -- capture any error number",
            "  SET @ReturnStatus = ERROR_NUMBER();",
            "  END CATCH",
            "END;",
            "GO"
        ],
        "sp_ImportValidationForSeries_UpdateInvalid.sql": [
            "SET ANSI_NULLS ON",
            "GO",
            "SET QUOTED_IDENTIFIER ON",
            "GO",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_ImportValidationForSeries_UpdateInvalid','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ImportValidationForSeries_UpdateInvalid;",
            "GO",
            "",
            "CREATE PROCEDURE [cmmt].[sp_ImportValidationForSeries_UpdateInvalid]",
            "  @ReturnStatus  INT OUTPUT",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            "  BEGIN TRY",
            "  UPDATE cmmt.cmmt_PatientStudySeriesData",
            "  SET Status = 'I'",
            "  FROM cmmt.cmmt_PatientStudySeriesData",
            "  WHERE (Status IS NULL OR Status = '')",
            "    AND (SOPInstanceUID   IS NULL OR LTRIM(RTRIM(SOPInstanceUID))   = ''",
            "    OR SOPClassUID   IS NULL OR LTRIM(RTRIM(SOPClassUID))   = ''",
            "    OR StudyInstanceUID   IS NULL OR LTRIM(RTRIM(StudyInstanceUID))   = ''",
            "    OR SeriesInstanceUID   IS NULL OR LTRIM(RTRIM(SeriesInstanceUID))   = '');",
            "  SET @ReturnStatus = 0;",
            "  END TRY",
            "  BEGIN CATCH",
            "  -- capture any error number",
            "  SET @ReturnStatus = ERROR_NUMBER();",
            "  END CATCH",
            "END;",
            "GO"
        ],
        "sp_ImportValidationForSeries_UpdateValid.sql": [
            "SET ANSI_NULLS ON",
            "GO",
            "SET QUOTED_IDENTIFIER ON",
            "GO",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_ImportValidationForSeries_UpdateValid','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ImportValidationForSeries_UpdateValid;",
            "GO",
            "",
            "CREATE PROCEDURE [cmmt].[sp_ImportValidationForSeries_UpdateValid]",
            "  @ReturnStatus  INT OUTPUT",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            "  BEGIN TRY",
            "  UPDATE cmmt.cmmt_PatientStudySeriesData",
            "  SET Status = 'V'",
            "  FROM cmmt.cmmt_PatientStudySeriesData",
            "  WHERE (Status IS NULL OR Status = '')",
            "    AND SOPInstanceUID   IS NOT NULL AND LTRIM(RTRIM(SOPInstanceUID))   <> ''",
            "    AND SOPClassUID   IS NOT NULL AND LTRIM(RTRIM(SOPClassUID))   <> ''",
            "    AND StudyInstanceUID   IS NOT NULL AND LTRIM(RTRIM(StudyInstanceUID))   <> ''",
            "    AND SeriesInstanceUID   IS NOT NULL AND LTRIM(RTRIM(SeriesInstanceUID))   <> '';",
            "  SET @ReturnStatus = 0;",
            "  END TRY",
            "  BEGIN CATCH",
            "  -- capture any error number",
            "  SET @ReturnStatus = ERROR_NUMBER();",
            "  END CATCH",
            "END;",
            "GO"
        ],
        "GetProcessedFileNames.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            "",
            "-- Drop the old proc if it exists",
            "IF OBJECT_ID('cmmt.GetProcessedFileNames','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.GetProcessedFileNames;",
            "GO",
            "",
            "CREATE PROCEDURE [cmmt].[GetProcessedFileNames]",
            "    @FileNames NVARCHAR(MAX)",
            "AS",
            "BEGIN",
            "    SET NOCOUNT ON;",
            "    DECLARE @sql NVARCHAR(MAX);",
            "    SET @sql = N'",
            "        ;WITH FileNameList AS (",
            "            SELECT value AS FileName",
            "            FROM STRING_SPLIT(@FileNames, '','')",
            "        )",
            "SELECT DISTINCT FileName",
            "FROM (",
            "    SELECT FileName FROM cmmt.cmmt_PatientStudyMetaData",
            "    WHERE FileName IN (SELECT FileName FROM FileNameList)",
            "    UNION",
            "    SELECT FileName FROM cmmt.cmmt_PatientStudySeriesData",
            "    WHERE FileName IN (SELECT FileName FROM FileNameList)",
            "    UNION",
            "    SELECT FileName FROM cmmt.cmmt_PatientStudyReportData",
            "    WHERE FileName IN (SELECT FileName FROM FileNameList)",
            ") AS AllFiles",
            "    ';",
            "    EXEC sp_executesql",
            "        @sql,",
            "        N'@FileNames NVARCHAR(MAX)',",
            "        @FileNames = @FileNames;",
            "END",
            "GO"
        ],
        "sp_GetMigratedRowsCount.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            "IF OBJECT_ID('cmmt.sp_GetMigratedRowsCount','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_GetMigratedRowsCount;",
            "GO",
            "CREATE PROCEDURE cmmt.sp_GetMigratedRowsCount",
            "AS",
            "BEGIN",
            "    SET NOCOUNT ON;",
            "    SELECT",
            "        (SELECT COUNT(*) FROM cmmt.cmmt_PatientStudyMetaData WHERE Status IN ('P','E')) AS StudyCount,",
            "        (SELECT COUNT(*) FROM cmmt.cmmt_PatientStudySeriesData WHERE Status IN ('P','E')) AS SeriesCount;",
            "END;",
            "GO"
        ],
        "sp_ResetMigratedRows.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            "IF OBJECT_ID('cmmt.sp_ResetMigratedRows','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ResetMigratedRows;",
            "GO",
            "CREATE PROCEDURE cmmt.sp_ResetMigratedRows",
            "AS",
            "BEGIN",
            "    SET NOCOUNT ON;",
            "    UPDATE cmmt.cmmt_PatientStudyMetaData SET Status = 'V' WHERE Status IN ('P','E');",
            "    UPDATE cmmt.cmmt_PatientStudySeriesData SET Status = 'V' WHERE Status IN ('P','E');",
            "    TRUNCATE TABLE cmmt.cmmt_ErrorLog;",
            "END;",
            "GO"
        ]
    },
    "Queries": {
        "LoadDistinctInstitutionNames": [
            "SELECT DISTINCT [InstitutionName] FROM [Xcelera].[dbo].[_INSTITUTION] WHERE [InstitutionName] IS NOT NULL AND LTRIM(RTRIM([InstitutionName])) <> '' ORDER BY [InstitutionName]"
        ],
        "LoadArchiveTypes": [
            "SELECT sl.storageLocDBKey, sl.accessProtocol, sl.hostName, sl.rootPath, sap.identifier FROM Xcelera.dbo._STORAGE_LOC AS sl INNER JOIN Xcelera.dbo._STORAGE_ACCESS_PROTOCOL AS sap ON sl.AccessProtocol = sap.AccessProtocol WHERE sl.StorageType = 1 AND sl.AccessType = 1 AND sl.ServerStatus = 1"
        ],
        "LoadDistinctStudyTypeNames": [
            "SELECT DISTINCT [StudyTypeName] FROM [Xcelera].[dbo].[_STUDY_TYPE] WHERE [StudyTypeName] IS NOT NULL AND LTRIM(RTRIM([StudyTypeName])) <> '' ORDER BY [StudyTypeName]"
        ]
    }
}